# -*- mode: c; c-basic-offset: 4; indent-tabs-mode: nil; -*-
# vim:expandtab:shiftwidth=4:tabstop=4:

General
{
	fs_path = /mnt/lustre;
	fs_type = lustre;
}

# ChangeLog Reader configuration
# Parameters for processing MDT changelogs :
ChangeLog
{
    # 1 MDT block for each MDT :
    MDT
    {
        # name of the first MDT
        mdt_name  = "MDT0000" ;

        # id of the persistent changelog reader
        # as returned by "lctl changelog_register" command
        reader_id = "cl1" ;
    }
    force_polling = TRUE;
    polling_interval = 1s;
    mds_has_lu543 = FALSE;
    mds_has_lu1331 = FALSE;
}

Log
{
    # Log verbosity level
    # Possible values are: CRIT, MAJOR, EVENT, VERB, DEBUG, FULL
    debug_level = EVENT;

    # Log file
    log_file = stdout;

    # File for reporting purge events
    report_file = "/dev/null";

    # set alert_file, alert_mail or both depending on the alert method you wish
    alert_file = "/tmp/rh_alert.log";

}

ListManager
{
	MySQL
	{
		server = "localhost";
		db = "robinhood_lustre";
        user = "robinhood";
		# password or password_file are mandatory
		password = "robinhood";
        engine = InnoDB;
	}

	SQLite {
	        db_file = "/tmp/robinhood_sqlite_db" ;
        	retry_delay_microsec = 1000 ;
	}
}

# for tests with backup purpose
backend
{
    root = "/tmp/backend";
    mnt_type=ext4;
    check_mounted = FALSE;
}

FS_Scan
{
    Ignore { path == "/mnt/lustre/.lustre" }
}

define_policy {
    name  = "migration";
    scope { type == file and (status == new or status == modified) }
    status_manager = lhsm;
}

migration_parameters
{
    lru_sort_attr = last_mod;
    default_action = lhsm.archive;
    nb_threads = 2;

    max_action_count = 100;
}

migration_trigger
{
    trigger_on = scheduled;
    check_interval = 1s;
}

define_policy {
    name  = "purge";
    scope { type == file and status == synchro }
    status_manager = lhsm;
}

purge_parameters
{
    lru_sort_attr = last_access;
    default_action = lhsm.release;
    nb_threads = 2;
}
